// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LOBBY.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LOBBY {

  /// <summary>Holder for reflection information generated from LOBBY.proto</summary>
  public static partial class LOBBYReflection {

    #region Descriptor
    /// <summary>File descriptor for LOBBY.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LOBBYReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtMT0JCWS5wcm90bxIFTE9CQlkiKQoJQ1NfTE9HX0lOEgoKAmlkGAEgASgJ",
            "EhAKCHBhc3N3b3JkGAIgASgJIoEBCglTQ19MT0dfSU4SDgoGcmVzdWx0GAEg",
            "ASgIEhEKCXRpbWVzdGFtcBgCIAEoAxIQCghuaWNrbmFtZRgDIAEoCRITCgtt",
            "ZWRhbF9jb3VudBgEIAEoBRISCgpjb2luX2NvdW50GAUgASgFEhYKDmNoYXJh",
            "Y3Rlcl90eXBlGAYgASgFIkoKCkZJRUxEX0lORk8SEAoIZmllbGRfaWQYASAB",
            "KAUSEgoKdXNlcl9jb3VudBgCIAEoBRIWCg5tYXhfdXNlcl9jb3VudBgDIAEo",
            "BSIPCg1DU19GSUVMRF9MSVNUIkcKDVNDX0ZJRUxEX0xJU1QSDgoGcmVzdWx0",
            "GAEgASgIEiYKC2ZpZWxkX2luZm9zGAIgAygLMhEuTE9CQlkuRklFTERfSU5G",
            "TyIiCg5DU19FTlRFUl9GSUVMRBIQCghmaWVsZF9pZBgBIAEoBSI+Cg5TQ19F",
            "TlRFUl9GSUVMRBIOCgZyZXN1bHQYASABKAgSEAoIZmllbGRfaWQYAiABKAUS",
            "CgoCZWMYAyABKAkiIgoOQ1NfTEVBVkVfRklFTEQSEAoIZmllbGRfaWQYASAB",
            "KAUiLAoOU0NfTEVBVkVfRklFTEQSDgoGcmVzdWx0GAEgASgIEgoKAmVjGAIg",
            "ASgJIi8KFUNTX1BVUkNIQVNFX0NIQVJBQ1RFUhIWCg5jaGFyYWN0ZXJfdHlw",
            "ZRgBIAEoBSJcChVTQ19QVVJDSEFTRV9DSEFSQUNURVISEwoLbWVkYWxfY291",
            "bnQYASABKAUSEgoKY29pbl9jb3VudBgCIAEoBRIOCgZyZXN1bHQYAyABKAgS",
            "CgoCZWMYBCABKAkiKwoRQ1NfQ0hBUkFDVEVSX0lORk8SFgoOY2hhcmFjdGVy",
            "X3R5cGUYASABKAUiwAEKEVNDX0NIQVJBQ1RFUl9JTkZPEg4KBnJlc3VsdBgB",
            "IAEoCBIKCgJlYxgCIAEoCRIWCg5jaGFyYWN0ZXJfdHlwZRgDIAEoBRIOCgZt",
            "YXhfaHAYBCABKAUSDQoFc3BlZWQYBSABKAUSFAoMYnVsbGV0X3NwZWVkGAYg",
            "ASgFEhQKDGJ1bGxldF9wb3dlchgHIAEoBRIXCg9idWxsZXRfZGlzdGFuY2UY",
            "CCABKAUSEwoLcmVsb2FkX3RpbWUYCSABKAUqMgoMR2FtZURhdGFUeXBlEgoK",
            "BnRlc3RfMRAAEgoKBnRlc3RfMhABEgoKBnRlc3RfMxACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LOBBY.GameDataType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.CS_LOG_IN), global::LOBBY.CS_LOG_IN.Parser, new[]{ "Id", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.SC_LOG_IN), global::LOBBY.SC_LOG_IN.Parser, new[]{ "Result", "Timestamp", "Nickname", "MedalCount", "CoinCount", "CharacterType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.FIELD_INFO), global::LOBBY.FIELD_INFO.Parser, new[]{ "FieldId", "UserCount", "MaxUserCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.CS_FIELD_LIST), global::LOBBY.CS_FIELD_LIST.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.SC_FIELD_LIST), global::LOBBY.SC_FIELD_LIST.Parser, new[]{ "Result", "FieldInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.CS_ENTER_FIELD), global::LOBBY.CS_ENTER_FIELD.Parser, new[]{ "FieldId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.SC_ENTER_FIELD), global::LOBBY.SC_ENTER_FIELD.Parser, new[]{ "Result", "FieldId", "Ec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.CS_LEAVE_FIELD), global::LOBBY.CS_LEAVE_FIELD.Parser, new[]{ "FieldId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.SC_LEAVE_FIELD), global::LOBBY.SC_LEAVE_FIELD.Parser, new[]{ "Result", "Ec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.CS_PURCHASE_CHARACTER), global::LOBBY.CS_PURCHASE_CHARACTER.Parser, new[]{ "CharacterType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.SC_PURCHASE_CHARACTER), global::LOBBY.SC_PURCHASE_CHARACTER.Parser, new[]{ "MedalCount", "CoinCount", "Result", "Ec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.CS_CHARACTER_INFO), global::LOBBY.CS_CHARACTER_INFO.Parser, new[]{ "CharacterType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LOBBY.SC_CHARACTER_INFO), global::LOBBY.SC_CHARACTER_INFO.Parser, new[]{ "Result", "Ec", "CharacterType", "MaxHp", "Speed", "BulletSpeed", "BulletPower", "BulletDistance", "ReloadTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GameDataType {
    [pbr::OriginalName("test_1")] Test1 = 0,
    [pbr::OriginalName("test_2")] Test2 = 1,
    [pbr::OriginalName("test_3")] Test3 = 2,
  }

  #endregion

  #region Messages
  public sealed partial class CS_LOG_IN : pb::IMessage<CS_LOG_IN> {
    private static readonly pb::MessageParser<CS_LOG_IN> _parser = new pb::MessageParser<CS_LOG_IN>(() => new CS_LOG_IN());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_LOG_IN> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LOG_IN() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LOG_IN(CS_LOG_IN other) : this() {
      id_ = other.id_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LOG_IN Clone() {
      return new CS_LOG_IN(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_LOG_IN);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_LOG_IN other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_LOG_IN other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_LOG_IN : pb::IMessage<SC_LOG_IN> {
    private static readonly pb::MessageParser<SC_LOG_IN> _parser = new pb::MessageParser<SC_LOG_IN>(() => new SC_LOG_IN());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_LOG_IN> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_LOG_IN() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_LOG_IN(SC_LOG_IN other) : this() {
      result_ = other.result_;
      timestamp_ = other.timestamp_;
      nickname_ = other.nickname_;
      medalCount_ = other.medalCount_;
      coinCount_ = other.coinCount_;
      characterType_ = other.characterType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_LOG_IN Clone() {
      return new SC_LOG_IN(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "medal_count" field.</summary>
    public const int MedalCountFieldNumber = 4;
    private int medalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MedalCount {
      get { return medalCount_; }
      set {
        medalCount_ = value;
      }
    }

    /// <summary>Field number for the "coin_count" field.</summary>
    public const int CoinCountFieldNumber = 5;
    private int coinCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoinCount {
      get { return coinCount_; }
      set {
        coinCount_ = value;
      }
    }

    /// <summary>Field number for the "character_type" field.</summary>
    public const int CharacterTypeFieldNumber = 6;
    private int characterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterType {
      get { return characterType_; }
      set {
        characterType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_LOG_IN);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_LOG_IN other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Nickname != other.Nickname) return false;
      if (MedalCount != other.MedalCount) return false;
      if (CoinCount != other.CoinCount) return false;
      if (CharacterType != other.CharacterType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (MedalCount != 0) hash ^= MedalCount.GetHashCode();
      if (CoinCount != 0) hash ^= CoinCount.GetHashCode();
      if (CharacterType != 0) hash ^= CharacterType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (MedalCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MedalCount);
      }
      if (CoinCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CoinCount);
      }
      if (CharacterType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CharacterType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (MedalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MedalCount);
      }
      if (CoinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinCount);
      }
      if (CharacterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_LOG_IN other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.MedalCount != 0) {
        MedalCount = other.MedalCount;
      }
      if (other.CoinCount != 0) {
        CoinCount = other.CoinCount;
      }
      if (other.CharacterType != 0) {
        CharacterType = other.CharacterType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            MedalCount = input.ReadInt32();
            break;
          }
          case 40: {
            CoinCount = input.ReadInt32();
            break;
          }
          case 48: {
            CharacterType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIELD_INFO : pb::IMessage<FIELD_INFO> {
    private static readonly pb::MessageParser<FIELD_INFO> _parser = new pb::MessageParser<FIELD_INFO>(() => new FIELD_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIELD_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIELD_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIELD_INFO(FIELD_INFO other) : this() {
      fieldId_ = other.fieldId_;
      userCount_ = other.userCount_;
      maxUserCount_ = other.maxUserCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIELD_INFO Clone() {
      return new FIELD_INFO(this);
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 1;
    private int fieldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    /// <summary>Field number for the "user_count" field.</summary>
    public const int UserCountFieldNumber = 2;
    private int userCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserCount {
      get { return userCount_; }
      set {
        userCount_ = value;
      }
    }

    /// <summary>Field number for the "max_user_count" field.</summary>
    public const int MaxUserCountFieldNumber = 3;
    private int maxUserCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxUserCount {
      get { return maxUserCount_; }
      set {
        maxUserCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIELD_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIELD_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldId != other.FieldId) return false;
      if (UserCount != other.UserCount) return false;
      if (MaxUserCount != other.MaxUserCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FieldId != 0) hash ^= FieldId.GetHashCode();
      if (UserCount != 0) hash ^= UserCount.GetHashCode();
      if (MaxUserCount != 0) hash ^= MaxUserCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FieldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FieldId);
      }
      if (UserCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserCount);
      }
      if (MaxUserCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxUserCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FieldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldId);
      }
      if (UserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserCount);
      }
      if (MaxUserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUserCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIELD_INFO other) {
      if (other == null) {
        return;
      }
      if (other.FieldId != 0) {
        FieldId = other.FieldId;
      }
      if (other.UserCount != 0) {
        UserCount = other.UserCount;
      }
      if (other.MaxUserCount != 0) {
        MaxUserCount = other.MaxUserCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FieldId = input.ReadInt32();
            break;
          }
          case 16: {
            UserCount = input.ReadInt32();
            break;
          }
          case 24: {
            MaxUserCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_FIELD_LIST : pb::IMessage<CS_FIELD_LIST> {
    private static readonly pb::MessageParser<CS_FIELD_LIST> _parser = new pb::MessageParser<CS_FIELD_LIST>(() => new CS_FIELD_LIST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_FIELD_LIST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_FIELD_LIST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_FIELD_LIST(CS_FIELD_LIST other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_FIELD_LIST Clone() {
      return new CS_FIELD_LIST(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_FIELD_LIST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_FIELD_LIST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_FIELD_LIST other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SC_FIELD_LIST : pb::IMessage<SC_FIELD_LIST> {
    private static readonly pb::MessageParser<SC_FIELD_LIST> _parser = new pb::MessageParser<SC_FIELD_LIST>(() => new SC_FIELD_LIST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_FIELD_LIST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_FIELD_LIST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_FIELD_LIST(SC_FIELD_LIST other) : this() {
      result_ = other.result_;
      fieldInfos_ = other.fieldInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_FIELD_LIST Clone() {
      return new SC_FIELD_LIST(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "field_infos" field.</summary>
    public const int FieldInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LOBBY.FIELD_INFO> _repeated_fieldInfos_codec
        = pb::FieldCodec.ForMessage(18, global::LOBBY.FIELD_INFO.Parser);
    private readonly pbc::RepeatedField<global::LOBBY.FIELD_INFO> fieldInfos_ = new pbc::RepeatedField<global::LOBBY.FIELD_INFO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LOBBY.FIELD_INFO> FieldInfos {
      get { return fieldInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_FIELD_LIST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_FIELD_LIST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!fieldInfos_.Equals(other.fieldInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      hash ^= fieldInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      fieldInfos_.WriteTo(output, _repeated_fieldInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      size += fieldInfos_.CalculateSize(_repeated_fieldInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_FIELD_LIST other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      fieldInfos_.Add(other.fieldInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 18: {
            fieldInfos_.AddEntriesFrom(input, _repeated_fieldInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_ENTER_FIELD : pb::IMessage<CS_ENTER_FIELD> {
    private static readonly pb::MessageParser<CS_ENTER_FIELD> _parser = new pb::MessageParser<CS_ENTER_FIELD>(() => new CS_ENTER_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_ENTER_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ENTER_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ENTER_FIELD(CS_ENTER_FIELD other) : this() {
      fieldId_ = other.fieldId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ENTER_FIELD Clone() {
      return new CS_ENTER_FIELD(this);
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 1;
    private int fieldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_ENTER_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_ENTER_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldId != other.FieldId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FieldId != 0) hash ^= FieldId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FieldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FieldId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FieldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_ENTER_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.FieldId != 0) {
        FieldId = other.FieldId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FieldId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_ENTER_FIELD : pb::IMessage<SC_ENTER_FIELD> {
    private static readonly pb::MessageParser<SC_ENTER_FIELD> _parser = new pb::MessageParser<SC_ENTER_FIELD>(() => new SC_ENTER_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_ENTER_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ENTER_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ENTER_FIELD(SC_ENTER_FIELD other) : this() {
      result_ = other.result_;
      fieldId_ = other.fieldId_;
      ec_ = other.ec_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ENTER_FIELD Clone() {
      return new SC_ENTER_FIELD(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 2;
    private int fieldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    /// <summary>Field number for the "ec" field.</summary>
    public const int EcFieldNumber = 3;
    private string ec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ec {
      get { return ec_; }
      set {
        ec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_ENTER_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_ENTER_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (FieldId != other.FieldId) return false;
      if (Ec != other.Ec) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (FieldId != 0) hash ^= FieldId.GetHashCode();
      if (Ec.Length != 0) hash ^= Ec.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (FieldId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FieldId);
      }
      if (Ec.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (FieldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldId);
      }
      if (Ec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ec);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_ENTER_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.FieldId != 0) {
        FieldId = other.FieldId;
      }
      if (other.Ec.Length != 0) {
        Ec = other.Ec;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 16: {
            FieldId = input.ReadInt32();
            break;
          }
          case 26: {
            Ec = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_LEAVE_FIELD : pb::IMessage<CS_LEAVE_FIELD> {
    private static readonly pb::MessageParser<CS_LEAVE_FIELD> _parser = new pb::MessageParser<CS_LEAVE_FIELD>(() => new CS_LEAVE_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_LEAVE_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LEAVE_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LEAVE_FIELD(CS_LEAVE_FIELD other) : this() {
      fieldId_ = other.fieldId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LEAVE_FIELD Clone() {
      return new CS_LEAVE_FIELD(this);
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 1;
    private int fieldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_LEAVE_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_LEAVE_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldId != other.FieldId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FieldId != 0) hash ^= FieldId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FieldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FieldId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FieldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_LEAVE_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.FieldId != 0) {
        FieldId = other.FieldId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FieldId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_LEAVE_FIELD : pb::IMessage<SC_LEAVE_FIELD> {
    private static readonly pb::MessageParser<SC_LEAVE_FIELD> _parser = new pb::MessageParser<SC_LEAVE_FIELD>(() => new SC_LEAVE_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_LEAVE_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_LEAVE_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_LEAVE_FIELD(SC_LEAVE_FIELD other) : this() {
      result_ = other.result_;
      ec_ = other.ec_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_LEAVE_FIELD Clone() {
      return new SC_LEAVE_FIELD(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "ec" field.</summary>
    public const int EcFieldNumber = 2;
    private string ec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ec {
      get { return ec_; }
      set {
        ec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_LEAVE_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_LEAVE_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Ec != other.Ec) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (Ec.Length != 0) hash ^= Ec.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Ec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Ec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ec);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_LEAVE_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Ec.Length != 0) {
        Ec = other.Ec;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 18: {
            Ec = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_PURCHASE_CHARACTER : pb::IMessage<CS_PURCHASE_CHARACTER> {
    private static readonly pb::MessageParser<CS_PURCHASE_CHARACTER> _parser = new pb::MessageParser<CS_PURCHASE_CHARACTER>(() => new CS_PURCHASE_CHARACTER());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PURCHASE_CHARACTER> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PURCHASE_CHARACTER() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PURCHASE_CHARACTER(CS_PURCHASE_CHARACTER other) : this() {
      characterType_ = other.characterType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PURCHASE_CHARACTER Clone() {
      return new CS_PURCHASE_CHARACTER(this);
    }

    /// <summary>Field number for the "character_type" field.</summary>
    public const int CharacterTypeFieldNumber = 1;
    private int characterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterType {
      get { return characterType_; }
      set {
        characterType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PURCHASE_CHARACTER);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PURCHASE_CHARACTER other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterType != other.CharacterType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharacterType != 0) hash ^= CharacterType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CharacterType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PURCHASE_CHARACTER other) {
      if (other == null) {
        return;
      }
      if (other.CharacterType != 0) {
        CharacterType = other.CharacterType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharacterType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_PURCHASE_CHARACTER : pb::IMessage<SC_PURCHASE_CHARACTER> {
    private static readonly pb::MessageParser<SC_PURCHASE_CHARACTER> _parser = new pb::MessageParser<SC_PURCHASE_CHARACTER>(() => new SC_PURCHASE_CHARACTER());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_PURCHASE_CHARACTER> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_PURCHASE_CHARACTER() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_PURCHASE_CHARACTER(SC_PURCHASE_CHARACTER other) : this() {
      medalCount_ = other.medalCount_;
      coinCount_ = other.coinCount_;
      result_ = other.result_;
      ec_ = other.ec_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_PURCHASE_CHARACTER Clone() {
      return new SC_PURCHASE_CHARACTER(this);
    }

    /// <summary>Field number for the "medal_count" field.</summary>
    public const int MedalCountFieldNumber = 1;
    private int medalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MedalCount {
      get { return medalCount_; }
      set {
        medalCount_ = value;
      }
    }

    /// <summary>Field number for the "coin_count" field.</summary>
    public const int CoinCountFieldNumber = 2;
    private int coinCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoinCount {
      get { return coinCount_; }
      set {
        coinCount_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "ec" field.</summary>
    public const int EcFieldNumber = 4;
    private string ec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ec {
      get { return ec_; }
      set {
        ec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_PURCHASE_CHARACTER);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_PURCHASE_CHARACTER other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MedalCount != other.MedalCount) return false;
      if (CoinCount != other.CoinCount) return false;
      if (Result != other.Result) return false;
      if (Ec != other.Ec) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MedalCount != 0) hash ^= MedalCount.GetHashCode();
      if (CoinCount != 0) hash ^= CoinCount.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      if (Ec.Length != 0) hash ^= Ec.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MedalCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MedalCount);
      }
      if (CoinCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CoinCount);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
      if (Ec.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MedalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MedalCount);
      }
      if (CoinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinCount);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (Ec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ec);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_PURCHASE_CHARACTER other) {
      if (other == null) {
        return;
      }
      if (other.MedalCount != 0) {
        MedalCount = other.MedalCount;
      }
      if (other.CoinCount != 0) {
        CoinCount = other.CoinCount;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Ec.Length != 0) {
        Ec = other.Ec;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MedalCount = input.ReadInt32();
            break;
          }
          case 16: {
            CoinCount = input.ReadInt32();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
          case 34: {
            Ec = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_CHARACTER_INFO : pb::IMessage<CS_CHARACTER_INFO> {
    private static readonly pb::MessageParser<CS_CHARACTER_INFO> _parser = new pb::MessageParser<CS_CHARACTER_INFO>(() => new CS_CHARACTER_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_CHARACTER_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_CHARACTER_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_CHARACTER_INFO(CS_CHARACTER_INFO other) : this() {
      characterType_ = other.characterType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_CHARACTER_INFO Clone() {
      return new CS_CHARACTER_INFO(this);
    }

    /// <summary>Field number for the "character_type" field.</summary>
    public const int CharacterTypeFieldNumber = 1;
    private int characterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterType {
      get { return characterType_; }
      set {
        characterType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_CHARACTER_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_CHARACTER_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterType != other.CharacterType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharacterType != 0) hash ^= CharacterType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CharacterType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_CHARACTER_INFO other) {
      if (other == null) {
        return;
      }
      if (other.CharacterType != 0) {
        CharacterType = other.CharacterType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharacterType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_CHARACTER_INFO : pb::IMessage<SC_CHARACTER_INFO> {
    private static readonly pb::MessageParser<SC_CHARACTER_INFO> _parser = new pb::MessageParser<SC_CHARACTER_INFO>(() => new SC_CHARACTER_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_CHARACTER_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LOBBY.LOBBYReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_CHARACTER_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_CHARACTER_INFO(SC_CHARACTER_INFO other) : this() {
      result_ = other.result_;
      ec_ = other.ec_;
      characterType_ = other.characterType_;
      maxHp_ = other.maxHp_;
      speed_ = other.speed_;
      bulletSpeed_ = other.bulletSpeed_;
      bulletPower_ = other.bulletPower_;
      bulletDistance_ = other.bulletDistance_;
      reloadTime_ = other.reloadTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_CHARACTER_INFO Clone() {
      return new SC_CHARACTER_INFO(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "ec" field.</summary>
    public const int EcFieldNumber = 2;
    private string ec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ec {
      get { return ec_; }
      set {
        ec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "character_type" field.</summary>
    public const int CharacterTypeFieldNumber = 3;
    private int characterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterType {
      get { return characterType_; }
      set {
        characterType_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 4;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "bullet_speed" field.</summary>
    public const int BulletSpeedFieldNumber = 6;
    private int bulletSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletSpeed {
      get { return bulletSpeed_; }
      set {
        bulletSpeed_ = value;
      }
    }

    /// <summary>Field number for the "bullet_power" field.</summary>
    public const int BulletPowerFieldNumber = 7;
    private int bulletPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletPower {
      get { return bulletPower_; }
      set {
        bulletPower_ = value;
      }
    }

    /// <summary>Field number for the "bullet_distance" field.</summary>
    public const int BulletDistanceFieldNumber = 8;
    private int bulletDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletDistance {
      get { return bulletDistance_; }
      set {
        bulletDistance_ = value;
      }
    }

    /// <summary>Field number for the "reload_time" field.</summary>
    public const int ReloadTimeFieldNumber = 9;
    private int reloadTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReloadTime {
      get { return reloadTime_; }
      set {
        reloadTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_CHARACTER_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_CHARACTER_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Ec != other.Ec) return false;
      if (CharacterType != other.CharacterType) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Speed != other.Speed) return false;
      if (BulletSpeed != other.BulletSpeed) return false;
      if (BulletPower != other.BulletPower) return false;
      if (BulletDistance != other.BulletDistance) return false;
      if (ReloadTime != other.ReloadTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (Ec.Length != 0) hash ^= Ec.GetHashCode();
      if (CharacterType != 0) hash ^= CharacterType.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (BulletSpeed != 0) hash ^= BulletSpeed.GetHashCode();
      if (BulletPower != 0) hash ^= BulletPower.GetHashCode();
      if (BulletDistance != 0) hash ^= BulletDistance.GetHashCode();
      if (ReloadTime != 0) hash ^= ReloadTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Ec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ec);
      }
      if (CharacterType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CharacterType);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxHp);
      }
      if (Speed != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Speed);
      }
      if (BulletSpeed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BulletSpeed);
      }
      if (BulletPower != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BulletPower);
      }
      if (BulletDistance != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BulletDistance);
      }
      if (ReloadTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ReloadTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Ec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ec);
      }
      if (CharacterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterType);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (BulletSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletSpeed);
      }
      if (BulletPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletPower);
      }
      if (BulletDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletDistance);
      }
      if (ReloadTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReloadTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_CHARACTER_INFO other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Ec.Length != 0) {
        Ec = other.Ec;
      }
      if (other.CharacterType != 0) {
        CharacterType = other.CharacterType;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.BulletSpeed != 0) {
        BulletSpeed = other.BulletSpeed;
      }
      if (other.BulletPower != 0) {
        BulletPower = other.BulletPower;
      }
      if (other.BulletDistance != 0) {
        BulletDistance = other.BulletDistance;
      }
      if (other.ReloadTime != 0) {
        ReloadTime = other.ReloadTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 18: {
            Ec = input.ReadString();
            break;
          }
          case 24: {
            CharacterType = input.ReadInt32();
            break;
          }
          case 32: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 40: {
            Speed = input.ReadInt32();
            break;
          }
          case 48: {
            BulletSpeed = input.ReadInt32();
            break;
          }
          case 56: {
            BulletPower = input.ReadInt32();
            break;
          }
          case 64: {
            BulletDistance = input.ReadInt32();
            break;
          }
          case 72: {
            ReloadTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

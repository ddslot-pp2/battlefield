// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GAME.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GAME {

  /// <summary>Holder for reflection information generated from GAME.proto</summary>
  public static partial class GAMEReflection {

    #region Descriptor
    /// <summary>File descriptor for GAME.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GAMEReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpHQU1FLnByb3RvEgRHQU1FIhwKB0NTX1BJTkcSEQoJdGltZXN0YW1wGAEg",
            "ASgDIhwKB1NDX1BJTkcSEQoJdGltZXN0YW1wGAEgASgDInoKCk9USEVSX0lO",
            "Rk8SDgoGb2JqX2lkGAEgASgDEhEKCXRhbmtfdHlwZRgCIAEoBRIQCghuaWNr",
            "bmFtZRgDIAEoCRIKCgJocBgEIAEoBRINCgVwb3NfeBgFIAEoAhINCgVwb3Nf",
            "eRgGIAEoAhINCgVwb3NfehgHIAEoAiIhCg1DU19TWU5DX0ZJRUxEEhAKCGZp",
            "ZWxkX2lkGAEgASgFIqQBCg1TQ19TWU5DX0ZJRUxEEg4KBm9ial9pZBgBIAEo",
            "AxIRCgl0YW5rX3R5cGUYAiABKAUSEAoIbmlja25hbWUYAyABKAkSCgoCaHAY",
            "BCABKAUSDQoFcG9zX3gYBSABKAISDQoFcG9zX3kYBiABKAISDQoFcG9zX3oY",
            "ByABKAISJQoLb3RoZXJfaW5mb3MYCCADKAsyEC5HQU1FLk9USEVSX0lORk8i",
            "iQEKGVNDX05PVElfT1RIRVJfRU5URVJfRklFTEQSDgoGb2JqX2lkGAEgASgD",
            "EhEKCXRhbmtfdHlwZRgCIAEoBRIQCghuaWNrbmFtZRgDIAEoCRIKCgJocBgE",
            "IAEoBRINCgVwb3NfeBgFIAEoAhINCgVwb3NfeRgGIAEoAhINCgVwb3NfehgH",
            "IAEoAiIrChlTQ19OT1RJX09USEVSX0xFQVZFX0ZJRUxEEg4KBm9ial9pZBgB",
            "IAEoAyI7CgxDU19OT1RJX01PVkUSDQoFcG9zX3gYASABKAISDQoFcG9zX3kY",
            "AiABKAISDQoFcG9zX3oYAyABKAIiUQoSU0NfTk9USV9PVEhFUl9NT1ZFEg4K",
            "Bm9ial9pZBgBIAEoAxINCgVwb3NfeBgCIAEoAhINCgVwb3NfeRgDIAEoAhIN",
            "CgVwb3NfehgEIAEoAiKLAQoLQlVMTEVUX0lORk8SDQoFZGlyX3gYASABKAIS",
            "DQoFZGlyX3kYAiABKAISDQoFZGlyX3oYAyABKAISDgoGc2l6ZV94GAQgASgC",
            "Eg4KBnNpemVfeRgFIAEoAhIOCgZzaXplX3oYBiABKAISDQoFc3BlZWQYByAB",
            "KAISEAoIZGlzdGFuY2UYCCABKAIioQEKB0NTX0ZJUkUSEwoLYnVsbGV0X3R5",
            "cGUYASABKAUSDQoFcG9zX3gYAiABKAISDQoFcG9zX3kYAyABKAISDQoFcG9z",
            "X3oYBCABKAISDQoFZGlyX3gYBSABKAISDQoFZGlyX3kYBiABKAISDQoFZGly",
            "X3oYByABKAISJwoMYnVsbGV0X2luZm9zGAggAygLMhEuR0FNRS5CVUxMRVRf",
            "SU5GTyLJAQoMU0NfTk9USV9GSVJFEg4KBm9ial9pZBgBIAEoAxIRCglidWxs",
            "ZXRfaWQYAiABKAMSEwoLYnVsbGV0X3R5cGUYAyABKAUSDQoFcG9zX3gYBCAB",
            "KAISDQoFcG9zX3kYBSABKAISDQoFcG9zX3oYBiABKAISDQoFZGlyX3gYByAB",
            "KAISDQoFZGlyX3kYCCABKAISDQoFZGlyX3oYCSABKAISJwoMYnVsbGV0X2lu",
            "Zm9zGAogAygLMhEuR0FNRS5CVUxMRVRfSU5GT2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.CS_PING), global::GAME.CS_PING.Parser, new[]{ "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_PING), global::GAME.SC_PING.Parser, new[]{ "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.OTHER_INFO), global::GAME.OTHER_INFO.Parser, new[]{ "ObjId", "TankType", "Nickname", "Hp", "PosX", "PosY", "PosZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.CS_SYNC_FIELD), global::GAME.CS_SYNC_FIELD.Parser, new[]{ "FieldId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_SYNC_FIELD), global::GAME.SC_SYNC_FIELD.Parser, new[]{ "ObjId", "TankType", "Nickname", "Hp", "PosX", "PosY", "PosZ", "OtherInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_NOTI_OTHER_ENTER_FIELD), global::GAME.SC_NOTI_OTHER_ENTER_FIELD.Parser, new[]{ "ObjId", "TankType", "Nickname", "Hp", "PosX", "PosY", "PosZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_NOTI_OTHER_LEAVE_FIELD), global::GAME.SC_NOTI_OTHER_LEAVE_FIELD.Parser, new[]{ "ObjId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.CS_NOTI_MOVE), global::GAME.CS_NOTI_MOVE.Parser, new[]{ "PosX", "PosY", "PosZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_NOTI_OTHER_MOVE), global::GAME.SC_NOTI_OTHER_MOVE.Parser, new[]{ "ObjId", "PosX", "PosY", "PosZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.BULLET_INFO), global::GAME.BULLET_INFO.Parser, new[]{ "DirX", "DirY", "DirZ", "SizeX", "SizeY", "SizeZ", "Speed", "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.CS_FIRE), global::GAME.CS_FIRE.Parser, new[]{ "BulletType", "PosX", "PosY", "PosZ", "DirX", "DirY", "DirZ", "BulletInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_NOTI_FIRE), global::GAME.SC_NOTI_FIRE.Parser, new[]{ "ObjId", "BulletId", "BulletType", "PosX", "PosY", "PosZ", "DirX", "DirY", "DirZ", "BulletInfos" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CS_PING : pb::IMessage<CS_PING> {
    private static readonly pb::MessageParser<CS_PING> _parser = new pb::MessageParser<CS_PING>(() => new CS_PING());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PING> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PING() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PING(CS_PING other) : this() {
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PING Clone() {
      return new CS_PING(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PING);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PING other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PING other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_PING : pb::IMessage<SC_PING> {
    private static readonly pb::MessageParser<SC_PING> _parser = new pb::MessageParser<SC_PING>(() => new SC_PING());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_PING> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_PING() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_PING(SC_PING other) : this() {
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_PING Clone() {
      return new SC_PING(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_PING);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_PING other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_PING other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OTHER_INFO : pb::IMessage<OTHER_INFO> {
    private static readonly pb::MessageParser<OTHER_INFO> _parser = new pb::MessageParser<OTHER_INFO>(() => new OTHER_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OTHER_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OTHER_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OTHER_INFO(OTHER_INFO other) : this() {
      objId_ = other.objId_;
      tankType_ = other.tankType_;
      nickname_ = other.nickname_;
      hp_ = other.hp_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OTHER_INFO Clone() {
      return new OTHER_INFO(this);
    }

    /// <summary>Field number for the "obj_id" field.</summary>
    public const int ObjIdFieldNumber = 1;
    private long objId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjId {
      get { return objId_; }
      set {
        objId_ = value;
      }
    }

    /// <summary>Field number for the "tank_type" field.</summary>
    public const int TankTypeFieldNumber = 2;
    private int tankType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TankType {
      get { return tankType_; }
      set {
        tankType_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 4;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 5;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 6;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 7;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OTHER_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OTHER_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjId != other.ObjId) return false;
      if (TankType != other.TankType) return false;
      if (Nickname != other.Nickname) return false;
      if (Hp != other.Hp) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjId != 0L) hash ^= ObjId.GetHashCode();
      if (TankType != 0) hash ^= TankType.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjId);
      }
      if (TankType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TankType);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (Hp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hp);
      }
      if (PosX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PosZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjId);
      }
      if (TankType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TankType);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OTHER_INFO other) {
      if (other == null) {
        return;
      }
      if (other.ObjId != 0L) {
        ObjId = other.ObjId;
      }
      if (other.TankType != 0) {
        TankType = other.TankType;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ObjId = input.ReadInt64();
            break;
          }
          case 16: {
            TankType = input.ReadInt32();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            Hp = input.ReadInt32();
            break;
          }
          case 45: {
            PosX = input.ReadFloat();
            break;
          }
          case 53: {
            PosY = input.ReadFloat();
            break;
          }
          case 61: {
            PosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_SYNC_FIELD : pb::IMessage<CS_SYNC_FIELD> {
    private static readonly pb::MessageParser<CS_SYNC_FIELD> _parser = new pb::MessageParser<CS_SYNC_FIELD>(() => new CS_SYNC_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_SYNC_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_SYNC_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_SYNC_FIELD(CS_SYNC_FIELD other) : this() {
      fieldId_ = other.fieldId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_SYNC_FIELD Clone() {
      return new CS_SYNC_FIELD(this);
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 1;
    private int fieldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_SYNC_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_SYNC_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldId != other.FieldId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FieldId != 0) hash ^= FieldId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FieldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FieldId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FieldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_SYNC_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.FieldId != 0) {
        FieldId = other.FieldId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FieldId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_SYNC_FIELD : pb::IMessage<SC_SYNC_FIELD> {
    private static readonly pb::MessageParser<SC_SYNC_FIELD> _parser = new pb::MessageParser<SC_SYNC_FIELD>(() => new SC_SYNC_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SYNC_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SYNC_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SYNC_FIELD(SC_SYNC_FIELD other) : this() {
      objId_ = other.objId_;
      tankType_ = other.tankType_;
      nickname_ = other.nickname_;
      hp_ = other.hp_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      otherInfos_ = other.otherInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SYNC_FIELD Clone() {
      return new SC_SYNC_FIELD(this);
    }

    /// <summary>Field number for the "obj_id" field.</summary>
    public const int ObjIdFieldNumber = 1;
    private long objId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjId {
      get { return objId_; }
      set {
        objId_ = value;
      }
    }

    /// <summary>Field number for the "tank_type" field.</summary>
    public const int TankTypeFieldNumber = 2;
    private int tankType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TankType {
      get { return tankType_; }
      set {
        tankType_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 4;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 5;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 6;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 7;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "other_infos" field.</summary>
    public const int OtherInfosFieldNumber = 8;
    private static readonly pb::FieldCodec<global::GAME.OTHER_INFO> _repeated_otherInfos_codec
        = pb::FieldCodec.ForMessage(66, global::GAME.OTHER_INFO.Parser);
    private readonly pbc::RepeatedField<global::GAME.OTHER_INFO> otherInfos_ = new pbc::RepeatedField<global::GAME.OTHER_INFO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GAME.OTHER_INFO> OtherInfos {
      get { return otherInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SYNC_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SYNC_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjId != other.ObjId) return false;
      if (TankType != other.TankType) return false;
      if (Nickname != other.Nickname) return false;
      if (Hp != other.Hp) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if(!otherInfos_.Equals(other.otherInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjId != 0L) hash ^= ObjId.GetHashCode();
      if (TankType != 0) hash ^= TankType.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      hash ^= otherInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjId);
      }
      if (TankType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TankType);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (Hp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hp);
      }
      if (PosX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PosZ);
      }
      otherInfos_.WriteTo(output, _repeated_otherInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjId);
      }
      if (TankType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TankType);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      size += otherInfos_.CalculateSize(_repeated_otherInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SYNC_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.ObjId != 0L) {
        ObjId = other.ObjId;
      }
      if (other.TankType != 0) {
        TankType = other.TankType;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      otherInfos_.Add(other.otherInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ObjId = input.ReadInt64();
            break;
          }
          case 16: {
            TankType = input.ReadInt32();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            Hp = input.ReadInt32();
            break;
          }
          case 45: {
            PosX = input.ReadFloat();
            break;
          }
          case 53: {
            PosY = input.ReadFloat();
            break;
          }
          case 61: {
            PosZ = input.ReadFloat();
            break;
          }
          case 66: {
            otherInfos_.AddEntriesFrom(input, _repeated_otherInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_NOTI_OTHER_ENTER_FIELD : pb::IMessage<SC_NOTI_OTHER_ENTER_FIELD> {
    private static readonly pb::MessageParser<SC_NOTI_OTHER_ENTER_FIELD> _parser = new pb::MessageParser<SC_NOTI_OTHER_ENTER_FIELD>(() => new SC_NOTI_OTHER_ENTER_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NOTI_OTHER_ENTER_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_OTHER_ENTER_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_OTHER_ENTER_FIELD(SC_NOTI_OTHER_ENTER_FIELD other) : this() {
      objId_ = other.objId_;
      tankType_ = other.tankType_;
      nickname_ = other.nickname_;
      hp_ = other.hp_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_OTHER_ENTER_FIELD Clone() {
      return new SC_NOTI_OTHER_ENTER_FIELD(this);
    }

    /// <summary>Field number for the "obj_id" field.</summary>
    public const int ObjIdFieldNumber = 1;
    private long objId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjId {
      get { return objId_; }
      set {
        objId_ = value;
      }
    }

    /// <summary>Field number for the "tank_type" field.</summary>
    public const int TankTypeFieldNumber = 2;
    private int tankType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TankType {
      get { return tankType_; }
      set {
        tankType_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 4;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 5;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 6;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 7;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NOTI_OTHER_ENTER_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NOTI_OTHER_ENTER_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjId != other.ObjId) return false;
      if (TankType != other.TankType) return false;
      if (Nickname != other.Nickname) return false;
      if (Hp != other.Hp) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjId != 0L) hash ^= ObjId.GetHashCode();
      if (TankType != 0) hash ^= TankType.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjId);
      }
      if (TankType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TankType);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (Hp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hp);
      }
      if (PosX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PosZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjId);
      }
      if (TankType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TankType);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NOTI_OTHER_ENTER_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.ObjId != 0L) {
        ObjId = other.ObjId;
      }
      if (other.TankType != 0) {
        TankType = other.TankType;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ObjId = input.ReadInt64();
            break;
          }
          case 16: {
            TankType = input.ReadInt32();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            Hp = input.ReadInt32();
            break;
          }
          case 45: {
            PosX = input.ReadFloat();
            break;
          }
          case 53: {
            PosY = input.ReadFloat();
            break;
          }
          case 61: {
            PosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_NOTI_OTHER_LEAVE_FIELD : pb::IMessage<SC_NOTI_OTHER_LEAVE_FIELD> {
    private static readonly pb::MessageParser<SC_NOTI_OTHER_LEAVE_FIELD> _parser = new pb::MessageParser<SC_NOTI_OTHER_LEAVE_FIELD>(() => new SC_NOTI_OTHER_LEAVE_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NOTI_OTHER_LEAVE_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_OTHER_LEAVE_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_OTHER_LEAVE_FIELD(SC_NOTI_OTHER_LEAVE_FIELD other) : this() {
      objId_ = other.objId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_OTHER_LEAVE_FIELD Clone() {
      return new SC_NOTI_OTHER_LEAVE_FIELD(this);
    }

    /// <summary>Field number for the "obj_id" field.</summary>
    public const int ObjIdFieldNumber = 1;
    private long objId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjId {
      get { return objId_; }
      set {
        objId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NOTI_OTHER_LEAVE_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NOTI_OTHER_LEAVE_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjId != other.ObjId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjId != 0L) hash ^= ObjId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NOTI_OTHER_LEAVE_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.ObjId != 0L) {
        ObjId = other.ObjId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ObjId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_NOTI_MOVE : pb::IMessage<CS_NOTI_MOVE> {
    private static readonly pb::MessageParser<CS_NOTI_MOVE> _parser = new pb::MessageParser<CS_NOTI_MOVE>(() => new CS_NOTI_MOVE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_NOTI_MOVE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_NOTI_MOVE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_NOTI_MOVE(CS_NOTI_MOVE other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_NOTI_MOVE Clone() {
      return new CS_NOTI_MOVE(this);
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 2;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 3;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_NOTI_MOVE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_NOTI_MOVE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_NOTI_MOVE other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            PosY = input.ReadFloat();
            break;
          }
          case 29: {
            PosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_NOTI_OTHER_MOVE : pb::IMessage<SC_NOTI_OTHER_MOVE> {
    private static readonly pb::MessageParser<SC_NOTI_OTHER_MOVE> _parser = new pb::MessageParser<SC_NOTI_OTHER_MOVE>(() => new SC_NOTI_OTHER_MOVE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NOTI_OTHER_MOVE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_OTHER_MOVE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_OTHER_MOVE(SC_NOTI_OTHER_MOVE other) : this() {
      objId_ = other.objId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_OTHER_MOVE Clone() {
      return new SC_NOTI_OTHER_MOVE(this);
    }

    /// <summary>Field number for the "obj_id" field.</summary>
    public const int ObjIdFieldNumber = 1;
    private long objId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjId {
      get { return objId_; }
      set {
        objId_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 4;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NOTI_OTHER_MOVE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NOTI_OTHER_MOVE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjId != other.ObjId) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjId != 0L) hash ^= ObjId.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjId);
      }
      if (PosX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjId);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NOTI_OTHER_MOVE other) {
      if (other == null) {
        return;
      }
      if (other.ObjId != 0L) {
        ObjId = other.ObjId;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ObjId = input.ReadInt64();
            break;
          }
          case 21: {
            PosX = input.ReadFloat();
            break;
          }
          case 29: {
            PosY = input.ReadFloat();
            break;
          }
          case 37: {
            PosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BULLET_INFO : pb::IMessage<BULLET_INFO> {
    private static readonly pb::MessageParser<BULLET_INFO> _parser = new pb::MessageParser<BULLET_INFO>(() => new BULLET_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BULLET_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BULLET_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BULLET_INFO(BULLET_INFO other) : this() {
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      dirZ_ = other.dirZ_;
      sizeX_ = other.sizeX_;
      sizeY_ = other.sizeY_;
      sizeZ_ = other.sizeZ_;
      speed_ = other.speed_;
      distance_ = other.distance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BULLET_INFO Clone() {
      return new BULLET_INFO(this);
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 1;
    private float dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 2;
    private float dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "dir_z" field.</summary>
    public const int DirZFieldNumber = 3;
    private float dirZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirZ {
      get { return dirZ_; }
      set {
        dirZ_ = value;
      }
    }

    /// <summary>Field number for the "size_x" field.</summary>
    public const int SizeXFieldNumber = 4;
    private float sizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SizeX {
      get { return sizeX_; }
      set {
        sizeX_ = value;
      }
    }

    /// <summary>Field number for the "size_y" field.</summary>
    public const int SizeYFieldNumber = 5;
    private float sizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SizeY {
      get { return sizeY_; }
      set {
        sizeY_ = value;
      }
    }

    /// <summary>Field number for the "size_z" field.</summary>
    public const int SizeZFieldNumber = 6;
    private float sizeZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SizeZ {
      get { return sizeZ_; }
      set {
        sizeZ_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 7;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 8;
    private float distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BULLET_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BULLET_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (DirZ != other.DirZ) return false;
      if (SizeX != other.SizeX) return false;
      if (SizeY != other.SizeY) return false;
      if (SizeZ != other.SizeZ) return false;
      if (Speed != other.Speed) return false;
      if (Distance != other.Distance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DirX != 0F) hash ^= DirX.GetHashCode();
      if (DirY != 0F) hash ^= DirY.GetHashCode();
      if (DirZ != 0F) hash ^= DirZ.GetHashCode();
      if (SizeX != 0F) hash ^= SizeX.GetHashCode();
      if (SizeY != 0F) hash ^= SizeY.GetHashCode();
      if (SizeZ != 0F) hash ^= SizeZ.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      if (Distance != 0F) hash ^= Distance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DirX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DirX);
      }
      if (DirY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DirY);
      }
      if (DirZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DirZ);
      }
      if (SizeX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SizeX);
      }
      if (SizeY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SizeY);
      }
      if (SizeZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(SizeZ);
      }
      if (Speed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Speed);
      }
      if (Distance != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Distance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DirX != 0F) {
        size += 1 + 4;
      }
      if (DirY != 0F) {
        size += 1 + 4;
      }
      if (DirZ != 0F) {
        size += 1 + 4;
      }
      if (SizeX != 0F) {
        size += 1 + 4;
      }
      if (SizeY != 0F) {
        size += 1 + 4;
      }
      if (SizeZ != 0F) {
        size += 1 + 4;
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Distance != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BULLET_INFO other) {
      if (other == null) {
        return;
      }
      if (other.DirX != 0F) {
        DirX = other.DirX;
      }
      if (other.DirY != 0F) {
        DirY = other.DirY;
      }
      if (other.DirZ != 0F) {
        DirZ = other.DirZ;
      }
      if (other.SizeX != 0F) {
        SizeX = other.SizeX;
      }
      if (other.SizeY != 0F) {
        SizeY = other.SizeY;
      }
      if (other.SizeZ != 0F) {
        SizeZ = other.SizeZ;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Distance != 0F) {
        Distance = other.Distance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            DirX = input.ReadFloat();
            break;
          }
          case 21: {
            DirY = input.ReadFloat();
            break;
          }
          case 29: {
            DirZ = input.ReadFloat();
            break;
          }
          case 37: {
            SizeX = input.ReadFloat();
            break;
          }
          case 45: {
            SizeY = input.ReadFloat();
            break;
          }
          case 53: {
            SizeZ = input.ReadFloat();
            break;
          }
          case 61: {
            Speed = input.ReadFloat();
            break;
          }
          case 69: {
            Distance = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_FIRE : pb::IMessage<CS_FIRE> {
    private static readonly pb::MessageParser<CS_FIRE> _parser = new pb::MessageParser<CS_FIRE>(() => new CS_FIRE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_FIRE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_FIRE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_FIRE(CS_FIRE other) : this() {
      bulletType_ = other.bulletType_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      dirZ_ = other.dirZ_;
      bulletInfos_ = other.bulletInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_FIRE Clone() {
      return new CS_FIRE(this);
    }

    /// <summary>Field number for the "bullet_type" field.</summary>
    public const int BulletTypeFieldNumber = 1;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 4;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 5;
    private float dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 6;
    private float dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "dir_z" field.</summary>
    public const int DirZFieldNumber = 7;
    private float dirZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirZ {
      get { return dirZ_; }
      set {
        dirZ_ = value;
      }
    }

    /// <summary>Field number for the "bullet_infos" field.</summary>
    public const int BulletInfosFieldNumber = 8;
    private static readonly pb::FieldCodec<global::GAME.BULLET_INFO> _repeated_bulletInfos_codec
        = pb::FieldCodec.ForMessage(66, global::GAME.BULLET_INFO.Parser);
    private readonly pbc::RepeatedField<global::GAME.BULLET_INFO> bulletInfos_ = new pbc::RepeatedField<global::GAME.BULLET_INFO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GAME.BULLET_INFO> BulletInfos {
      get { return bulletInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_FIRE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_FIRE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BulletType != other.BulletType) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (DirZ != other.DirZ) return false;
      if(!bulletInfos_.Equals(other.bulletInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      if (DirX != 0F) hash ^= DirX.GetHashCode();
      if (DirY != 0F) hash ^= DirY.GetHashCode();
      if (DirZ != 0F) hash ^= DirZ.GetHashCode();
      hash ^= bulletInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BulletType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BulletType);
      }
      if (PosX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosZ);
      }
      if (DirX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DirX);
      }
      if (DirY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DirY);
      }
      if (DirZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DirZ);
      }
      bulletInfos_.WriteTo(output, _repeated_bulletInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (DirX != 0F) {
        size += 1 + 4;
      }
      if (DirY != 0F) {
        size += 1 + 4;
      }
      if (DirZ != 0F) {
        size += 1 + 4;
      }
      size += bulletInfos_.CalculateSize(_repeated_bulletInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_FIRE other) {
      if (other == null) {
        return;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.DirX != 0F) {
        DirX = other.DirX;
      }
      if (other.DirY != 0F) {
        DirY = other.DirY;
      }
      if (other.DirZ != 0F) {
        DirZ = other.DirZ;
      }
      bulletInfos_.Add(other.bulletInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BulletType = input.ReadInt32();
            break;
          }
          case 21: {
            PosX = input.ReadFloat();
            break;
          }
          case 29: {
            PosY = input.ReadFloat();
            break;
          }
          case 37: {
            PosZ = input.ReadFloat();
            break;
          }
          case 45: {
            DirX = input.ReadFloat();
            break;
          }
          case 53: {
            DirY = input.ReadFloat();
            break;
          }
          case 61: {
            DirZ = input.ReadFloat();
            break;
          }
          case 66: {
            bulletInfos_.AddEntriesFrom(input, _repeated_bulletInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_NOTI_FIRE : pb::IMessage<SC_NOTI_FIRE> {
    private static readonly pb::MessageParser<SC_NOTI_FIRE> _parser = new pb::MessageParser<SC_NOTI_FIRE>(() => new SC_NOTI_FIRE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NOTI_FIRE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_FIRE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_FIRE(SC_NOTI_FIRE other) : this() {
      objId_ = other.objId_;
      bulletId_ = other.bulletId_;
      bulletType_ = other.bulletType_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      dirZ_ = other.dirZ_;
      bulletInfos_ = other.bulletInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_FIRE Clone() {
      return new SC_NOTI_FIRE(this);
    }

    /// <summary>Field number for the "obj_id" field.</summary>
    public const int ObjIdFieldNumber = 1;
    private long objId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjId {
      get { return objId_; }
      set {
        objId_ = value;
      }
    }

    /// <summary>Field number for the "bullet_id" field.</summary>
    public const int BulletIdFieldNumber = 2;
    private long bulletId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BulletId {
      get { return bulletId_; }
      set {
        bulletId_ = value;
      }
    }

    /// <summary>Field number for the "bullet_type" field.</summary>
    public const int BulletTypeFieldNumber = 3;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 4;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 5;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 6;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 7;
    private float dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 8;
    private float dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "dir_z" field.</summary>
    public const int DirZFieldNumber = 9;
    private float dirZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirZ {
      get { return dirZ_; }
      set {
        dirZ_ = value;
      }
    }

    /// <summary>Field number for the "bullet_infos" field.</summary>
    public const int BulletInfosFieldNumber = 10;
    private static readonly pb::FieldCodec<global::GAME.BULLET_INFO> _repeated_bulletInfos_codec
        = pb::FieldCodec.ForMessage(82, global::GAME.BULLET_INFO.Parser);
    private readonly pbc::RepeatedField<global::GAME.BULLET_INFO> bulletInfos_ = new pbc::RepeatedField<global::GAME.BULLET_INFO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GAME.BULLET_INFO> BulletInfos {
      get { return bulletInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NOTI_FIRE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NOTI_FIRE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjId != other.ObjId) return false;
      if (BulletId != other.BulletId) return false;
      if (BulletType != other.BulletType) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (DirZ != other.DirZ) return false;
      if(!bulletInfos_.Equals(other.bulletInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjId != 0L) hash ^= ObjId.GetHashCode();
      if (BulletId != 0L) hash ^= BulletId.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      if (DirX != 0F) hash ^= DirX.GetHashCode();
      if (DirY != 0F) hash ^= DirY.GetHashCode();
      if (DirZ != 0F) hash ^= DirZ.GetHashCode();
      hash ^= bulletInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjId);
      }
      if (BulletId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BulletId);
      }
      if (BulletType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletType);
      }
      if (PosX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosZ);
      }
      if (DirX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DirX);
      }
      if (DirY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DirY);
      }
      if (DirZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DirZ);
      }
      bulletInfos_.WriteTo(output, _repeated_bulletInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjId);
      }
      if (BulletId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BulletId);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (DirX != 0F) {
        size += 1 + 4;
      }
      if (DirY != 0F) {
        size += 1 + 4;
      }
      if (DirZ != 0F) {
        size += 1 + 4;
      }
      size += bulletInfos_.CalculateSize(_repeated_bulletInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NOTI_FIRE other) {
      if (other == null) {
        return;
      }
      if (other.ObjId != 0L) {
        ObjId = other.ObjId;
      }
      if (other.BulletId != 0L) {
        BulletId = other.BulletId;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.DirX != 0F) {
        DirX = other.DirX;
      }
      if (other.DirY != 0F) {
        DirY = other.DirY;
      }
      if (other.DirZ != 0F) {
        DirZ = other.DirZ;
      }
      bulletInfos_.Add(other.bulletInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ObjId = input.ReadInt64();
            break;
          }
          case 16: {
            BulletId = input.ReadInt64();
            break;
          }
          case 24: {
            BulletType = input.ReadInt32();
            break;
          }
          case 37: {
            PosX = input.ReadFloat();
            break;
          }
          case 45: {
            PosY = input.ReadFloat();
            break;
          }
          case 53: {
            PosZ = input.ReadFloat();
            break;
          }
          case 61: {
            DirX = input.ReadFloat();
            break;
          }
          case 69: {
            DirY = input.ReadFloat();
            break;
          }
          case 77: {
            DirZ = input.ReadFloat();
            break;
          }
          case 82: {
            bulletInfos_.AddEntriesFrom(input, _repeated_bulletInfos_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
